# -*- coding: utf-8 -*-
"""assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wIxUwYa58xCVXhDS-XMmDG_xPUOI7gaT
"""

# assignment2_integrated.py

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier
from xgboost import XGBClassifier
import joblib

# URLs for data
train_url = "https://github.com/dustywhite7/Econ8310/raw/master/AssignmentData/assignment3.csv"
test_url = "https://github.com/dustywhite7/Econ8310/raw/master/AssignmentData/assignment3test.csv"

# Load datasets
train_df = pd.read_csv(train_url)
test_df = pd.read_csv(test_url)

# Combine for consistent label encoding
combined_df = pd.concat([train_df, test_df], keys=["train", "test"])
non_numeric_cols = combined_df.select_dtypes(include=['object']).columns

# Encode non-numeric columns
label_encoders = {}
for col in non_numeric_cols:
    le = LabelEncoder()
    combined_df[col] = le.fit_transform(combined_df[col])
    label_encoders[col] = le

# Split combined data back
train_df = combined_df.xs("train")
test_df = combined_df.xs("test")

# Prepare features and labels
y = train_df['meal']
X = train_df.drop(columns=['meal', 'id', 'DateTime'], errors='ignore')
X_test = test_df.drop(columns=['meal', 'id', 'DateTime'], errors='ignore')

# Align test data columns with train data
X_test = X_test.reindex(columns=X.columns, fill_value=0)

# Train/validation split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Define and train the best model
model = XGBClassifier(n_estimators=100, max_depth=8, learning_rate=0.2,
                      random_state=42, objective='binary:logistic', use_label_encoder=False, eval_metric='logloss')
modelFit = model.fit(X_train, y_train)

# Validation Accuracy (for reference)
val_predictions = model.predict(X_val)
accuracy = accuracy_score(y_val, val_predictions)
print(f"Validation Accuracy: {accuracy:.2f}")

# Make predictions on test set
pred = model.predict(X_test)
pred = [int(p) for p in pred]

# Save predictions
pd.DataFrame(pred, columns=["meal_prediction"]).to_csv("predictions.csv", index=False)

# Save model
joblib.dump(modelFit, "modelFit.pkl")

# Print sample predictions
if __name__ == "__main__":
    print("Sample predictions:")
    print(pred[:5])
    print("Best model selected and predictions saved successfully.")